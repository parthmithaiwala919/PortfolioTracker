// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PortfolioTracker.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using PortfolioTracker;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using PortfolioTracker.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryDetail.razor"
using Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryDetail.razor"
using Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryDetail.razor"
using Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryDetail.razor"
using PortfolioTrackerStatsSource;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryDetail.razor"
using PortfolioTrackerStatsSource.model;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/entries/{entryId:int}")]
    public partial class PortfolioEntryDetail : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 220 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryDetail.razor"
 
    // ID of the entry whose detail should be displayed
    [Parameter]
    public int EntryId { get; set; }
    
    // portfolio the entry belongs to
    private Portfolio _activePortfolio;
    
    // the entry to be displayed
    private PortfolioEntry _activePortfolioEntry; 
    
    // market entry of the portfolio entry
    private MarketEntry _currentEntryAssetMarketEntry; 
    
    // cryptocurrency of the portfolio entry
    private Cryptocurrency _portfolioCryptocurrencyEntry;
    
    // summary of the entry
    private ISummaryService.Summary _entrySummary;
    
    // total holdings of the active entry 
    private decimal _totalHoldings;

    // flag indicating whether order's detail is open
    private bool _orderDetailDialogIsOpen;
    
    // order whose detail should be displayed 
    private Tuple<MarketOrder, ISummaryService.Summary> _orderToBeShown;

    // list of market orders mapped to summaries
    private List<Tuple<MarketOrder, ISummaryService.Summary>> _tableRowsItems;

    protected override void OnInitialized()
    {
        // get the portfolio entry
        _activePortfolioEntry = PortfolioEntryService.GetPortfolioEntry(EntryId);
        
        if (_activePortfolioEntry == null)
        {
            NavigationManager.NavigateTo("/notfound");
            return;
        }
        
        // get the entry's portfolio
        _activePortfolio = PortfolioService.GetPortfolio(_activePortfolioEntry.PortfolioId);
    }

    protected override async Task OnInitializedAsync()
    {
        // resolve the name of the cryptocurrency (using the symbol)
         _portfolioCryptocurrencyEntry = await CryptocurrencyResolver.Resolve(_activePortfolioEntry.Symbol);

        await UpdateEntrySummary();
    }

    private void SetEntryLoading()
    {
        _currentEntryAssetMarketEntry = null;
        _tableRowsItems = null;
        _entrySummary = null;
        StateHasChanged();
    }

    private async Task UpdateEntrySummary()
    {
        
        // fetch the price of the entry's asset
        _currentEntryAssetMarketEntry = (await PortfolioTrackerStatsSource.GetMarketEntries(
            CurrencyUtils.GetCurrencyLabel(_activePortfolio.Currency).ToLower(),
            _portfolioCryptocurrencyEntry.Id
            ))[0];

        // get all orders of the portfolio entry
        var entryOrders = MarketOrderService.GetPortfolioEntryOrders(_activePortfolioEntry.Id);

        // compute summaries of all orders in the entry
        var entrySummaries = entryOrders.Select(order =>
            SummaryService.GetMarketOrderSummary(order, _currentEntryAssetMarketEntry.CurrentPrice));

        // compute the total holdings by adding all buy order sizes and subtracting sell order sizes
        _totalHoldings = entryOrders.Sum(order => order.Size * (order.Buy ? 1 : -1));

        // zip entry orders and summaries into a table rows
        _tableRowsItems = entryOrders.Zip(entrySummaries)
            .Select(tuple => new Tuple<MarketOrder, ISummaryService.Summary>(tuple.First, tuple.Second)).ToList();

        // compute suummary of this entry
        _entrySummary = SummaryService.GetPortfolioEntrySummary(entryOrders, _currentEntryAssetMarketEntry.CurrentPrice);
    }

    public void EditMarketOrder(MarketOrder order)
    {
        NavigationManager.NavigateTo($"/editmarketorder/{order.Id}");
    }

    async void DeletePortfolio(MarketOrder order)
    {
        // let the user  confirm that he really wants to delete an entry
        var result = await MatDialogService.ConfirmAsync("Do you really wish to delete this market order?");
        if (result)
        {
            // delete the order
            MarketOrderService.DeleteMarketOrder(order);
            SetEntryLoading();
            // update the summary of the entry
            await UpdateEntrySummary();
            // refressh the UI
            StateHasChanged();
            Toaster.Add("Order successfully deleted", MatToastType.Success, "", "");
        }
    }

    void ShowOrderDetail(Tuple<MarketOrder, ISummaryService.Summary> order)
    {
        _orderToBeShown = order;
        _orderDetailDialogIsOpen = true;
        StateHasChanged();
    }

    void HideOrderDetail()
    {
        _orderToBeShown = null;
        _orderDetailDialogIsOpen = false;
        StateHasChanged();
    }

    private void SelectionChangedEvent(object obj)
    {
        if (obj != null)
        {   
            // order has been clicked, show its detail
            ShowOrderDetail((Tuple<MarketOrder, ISummaryService.Summary>) obj) ;
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISummaryService SummaryService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPortfolioTrackerStatsSource PortfolioTrackerStatsSource { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICryptocurrencyResolver CryptocurrencyResolver { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMarketOrderService MarketOrderService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPortfolioEntryService PortfolioEntryService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPortfolioService PortfolioService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster Toaster { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatDialogService MatDialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591

// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PortfolioTracker.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using PortfolioTracker;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using PortfolioTracker.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryManagement.razor"
using Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryManagement.razor"
using Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryManagement.razor"
using Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryManagement.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryManagement.razor"
using PortfolioTrackerStatsSource;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryManagement.razor"
using PortfolioTrackerStatsSource.model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryManagement.razor"
using Repository;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/newportfolioentry/{portfolioId:int}")]
    public partial class PortfolioEntryManagement : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 70 "D:\Ravi\New Changes\PortfolioTracker\PortfolioTracker\Pages\PortfolioEntryManagement.razor"
 
    public string CryptocurrencyFilter
    {
        get => _cryptocurrencyFilter;
        set
        {
            _cryptocurrencyFilter = value;
            // when setting the cryptocurrency symbol filter, do filter the list of available cryptos
            FilterCurrenciesBySymbol(value);
            this.StateHasChanged();
        }
    }

    private void FilterCurrenciesBySymbol(string value)
    {
        // filter by symbol
        _filteredCryptocurrencies = _availableCryptocurrencies.FindAll(c => c.Symbol.Contains(value));
        UpdateAvailableCryptocurrencies(_filteredCryptocurrencies);
    }

    private string _cryptocurrencyFilter;

    [Parameter]
    public int PortfolioId { get; set; }

    // the portfolio whose entries are being managed
    private Portfolio _portfolio;
    
    // existing entries of the portfolio 
    private List<PortfolioEntry> _portfolioEntries;

    // list of available cryptocurrencies
    private List<Cryptocurrency> _availableCryptocurrencies;
    
    // list of filtered cryptocurrencies
    private List<Cryptocurrency> _filteredCryptocurrencies;
    
    // cryptocurrencies mapped to a flag indicating whether it is present in the portfolio or not
    private List<Tuple<Cryptocurrency, bool>> _availableCryptocurrenciesWithUsage;

    protected override void OnInitialized()
    {
        // load the portfolio using the specified ID
        _portfolio = PortfolioService.GetPortfolio(PortfolioId);
        
        if (_portfolio == null)
        {
            NavigationManager.NavigateTo("/notfound");
            return;
        }
        
        // load all entries of the portfolio
        _portfolioEntries = PortfolioEntryService.GetPortfolioEntries(PortfolioId);
    }

    protected override async Task OnInitializedAsync()
    {
        // find all available cryptocurrencies
        _availableCryptocurrencies = (await PortfolioTrackerStatsSource.GetAvailableCryptocurrencies())
            // workaround till Coingecko removes binance-peg entries
            .Where(c => !c.Id.Contains("binance-peg")).ToList();
        _filteredCryptocurrencies = _availableCryptocurrencies;
        UpdateAvailableCryptocurrencies(_availableCryptocurrencies);
    }

    private void UpdateAvailableCryptocurrencies(List<Cryptocurrency> availableCryptocurrencies)
    {
        var entriesSymbols = _portfolioEntries.Select(e => e.Symbol.ToLower());
        // map available cryptocurrencies to a flag indicating whether they are used in the given portfolio
        // order by the flag and then by symbol length
        _availableCryptocurrenciesWithUsage = availableCryptocurrencies.Select(
            c => new Tuple<Cryptocurrency, bool>(c, !entriesSymbols.Contains(c.Symbol.ToLower()))
            ).OrderBy(c => c.Item2).ThenBy(c => c.Item1.Symbol.Length).ToList();
    }

    private void OnAddCurrencyClicked(Cryptocurrency cryptocurrency)
    {
        // create a new portfolio entry
        var entry = PortfolioEntryService.CreatePortfolioEntry(cryptocurrency.Symbol, PortfolioId);
        _portfolioEntries.Add(entry);
        
        // update the UI
        UpdateAvailableCryptocurrencies(_filteredCryptocurrencies);
        StateHasChanged();
        
        // notify the user
        Toaster.Add($"{cryptocurrency.Symbol.ToUpper()} entry successfully added to {_portfolio.Name}.", MatToastType.Success, "", "");
    }

    private async void OnDeleteCurrencyClicked(Cryptocurrency cryptocurrency)
    {
        // let user confirm whether he wants to delete the entry
        var result = await MatDialogService.ConfirmAsync($"Do you really wish to delete {cryptocurrency.Symbol.ToUpper()} entry including all of it's market entries?");
        if (result)
        {
            // find the entry
            var entry = _portfolioEntries.Find(entry => entry.Symbol == cryptocurrency.Symbol);
            // delete the entry
            PortfolioEntryService.DeletePortfolioEntry(entry);
            _portfolioEntries.Remove(entry);
            // update the UI
            UpdateAvailableCryptocurrencies(_filteredCryptocurrencies);
            StateHasChanged();
            Toaster.Add($"{cryptocurrency.Symbol.ToUpper()} entry successfully deleted from {_portfolio.Name}.", MatToastType.Success, "", "");
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster Toaster { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatDialogService MatDialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPortfolioTrackerStatsSource PortfolioTrackerStatsSource { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPortfolioEntryService PortfolioEntryService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPortfolioService PortfolioService { get; set; }
    }
}
#pragma warning restore 1591
